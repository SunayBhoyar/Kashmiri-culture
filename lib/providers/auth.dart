import 'package:flutter/material.dart';
import '../models/http_exception.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:async';
import 'package:shared_preferences/shared_preferences.dart';

class Auth with ChangeNotifier {
  String? _token; //the token expires after 1 hr. for firebase
  DateTime? _expirydate; //to store expiration date of the token
  String? _userID;
  Timer? _authTimer;

  String? get token {
    if (_expirydate != null &&
        _expirydate!.isAfter(DateTime.now()) &&
        _token != null) {
      // checking if the token has expired or not
      return _token;
    }
    return null;
  }

  bool get isAuth {
    return (token !=
        null); // if we have a token and it didn't expire, then we can conclude that the user has been authenticated: if token != null means the user is authenticated
  }

  String? get userID {
    return _userID;
  }

  Future<void> _authenticate(
      String? email, String? password, String? urlSegment) async {
    //this method is just a utility method to keep signup and login methods leaner as both operations are same with a post request to a slightly different url segment
    final url = Uri.parse(
        'https://identitytoolkit.googleapis.com/v1/accounts:$urlSegment?key=AIzaSyCKQJER2UKVNJU4uBw790sbniNFSvI7JbU');

    try {
      final response = await http.post(
        url,
        body: json.encode(
          {
            'email': email,
            'password': password,
            'returnSecureToken': true, // must always be true
          },
        ),
      );
      final responseData = json.decode(response.body);
      if (responseData['error'] != null) {
        // if error message exists in the response body, even though the status code is 200
        throw HttpException(message: responseData['error']['message']);
      }

      // If there is no error, we need to set the token and the expiration time of the token

      _token = responseData['idToken']; // set the Token ID sent by the API
      _userID = responseData[
          'localId']; // set the user ID as the Local ID sent by the API
      _expirydate = DateTime.now().add(Duration(
          seconds: int.parse(responseData[
              'expiresIn']))); // calculating how much time from the present time does the token expire in
      // _autoLogOut();
      notifyListeners(); // after authenticating the user successfully, we need to update the app ui to move to the products overview screen

      final prefs = await SharedPreferences.getInstance();
      final userData = json.encode(
        {
          'token': _token,
          'userID': _userID,
          'tokenExpirationTime': _expirydate!.toIso8601String(),
        },
      );
      prefs.setString("userData", userData);
      _autoLogOut();
    } catch (error) {
      rethrow;
    }
  }

  Future<void> login(String email, String password) async {
    return _authenticate(email, password,
        "signInWithPassword"); //we must return the future generated by _authenticate so that the loading spinner works correctly!!!
  }

  Future<void> signup(String email, String password) async {
    return _authenticate(email, password,
        "signUp"); //we must return the future generated by _authenticate so that the loading spinner works correctly!!!
  }

  Future<bool> tryAutoLogin() async {
    final prefs = await SharedPreferences.getInstance();
    if (!prefs.containsKey("UD")) {
      return false;
    }
    final extractedUserData =
        json.decode(prefs.getString("UD") ?? '') as Map<String, Object>;
    final expiryTime =
        DateTime.parse(extractedUserData['tokenExpirationTime'] as String);

    if (expiryTime.isBefore(DateTime.now())) {
      return false;
    }
    _token = extractedUserData['token'] as String;
    _expirydate = extractedUserData['tokenExpirationTime'] as DateTime;
    _userID = extractedUserData['userID'] as String;
    notifyListeners();
    _autoLogOut();
    return true;
  }

  Future<void> logout() async {
    print('logging out');
    _token = null;
    _expirydate = null;
    _userID = null;
    if (_authTimer != null) {
      _authTimer!.cancel();
      _authTimer = null;
    }
    notifyListeners();
    final prefs = await SharedPreferences.getInstance();
    prefs.clear();
    //prefs.remove(["User_Data"]);
  }

  // Future<bool> tryAutoLogin() async {
  //   final prefs = await SharedPreferences.getInstance();
  //   if (!prefs.containsKey('userData')) {
  //     return false;
  //   }
  //   final extractedUserData =
  //       json.decode(prefs.getString('userData')!) as Map<String, Object>;
  //   final expiryDate =
  //       DateTime.parse(extractedUserData['expiryDate'] as String);

  //   if (expiryDate.isBefore(DateTime.now())) {
  //     return false;
  //   }
  //   _token = extractedUserData['token'] as String;
  //   _userID = extractedUserData['userId'] as String;
  //   _expirydate = expiryDate;
  //   notifyListeners();
  //   _autoLogOut();
  //   return true;
  // }

  void _autoLogOut() {
    if (_authTimer != null) {
      _authTimer!.cancel();
    }
    final expiration = _expirydate!.difference(DateTime.now()).inSeconds;
    _authTimer = Timer(Duration(seconds: expiration), () => logout());
  }
}
